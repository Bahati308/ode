apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Load keystore properties from local.properties
 */
def keystorePropertiesFile = rootProject.file("local.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion = rootProject.ext.ndkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    compileSdk = rootProject.ext.compileSdkVersion

    namespace = "org.opendataensemble.formulus"

    defaultConfig {
        applicationId = "org.opendataensemble.formulus"
        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion
        versionCode = 1
        versionName = "1.0"
        
        // Enable VisionCamera code scanner
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", (findProperty("newArchEnabled") ?: "false").toString()
        buildConfigField "boolean", "VISION_CAMERA_ENABLE_CODE_SCANNER", "true"
    }

    signingConfigs {
        debug {
            storeFile = file('debug.keystore')
            storePassword = 'android'
            keyAlias = 'androiddebugkey'
            keyPassword = 'android'
        }
        release {
            if (keystorePropertiesFile.exists()) {
                // Use rootProject.file() to resolve path relative to android/ directory
                storeFile = rootProject.file(keystoreProperties['FORMULUS_RELEASE_STORE_FILE'])
                storePassword = keystoreProperties['FORMULUS_RELEASE_STORE_PASSWORD']
                keyAlias = keystoreProperties['FORMULUS_RELEASE_KEY_ALIAS']
                keyPassword = keystoreProperties['FORMULUS_RELEASE_KEY_PASSWORD']
            }
        }
    }

    buildTypes {
        debug {
            signingConfig = signingConfigs.debug
        }
        release {
            signingConfig = keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
            minifyEnabled = enableProguardInReleaseBuilds
            proguardFiles = [getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"]
        }
    }

    // Custom APK naming
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def buildType = variant.buildType.name
            def date = new Date().format('yyyyMMdd')
            
            // Format: formulus-v1.0-1-release-20251006.apk
            outputFileName = "formulus-v${versionName}-${versionCode}-${buildType}-${date}.apk"
        }
    }

    def assetsDir = file("$projectDir/src/main/assets")
    if (!assetsDir.exists()) {
        assetsDir.mkdirs()
    }

    packagingOptions {
        pickFirst '**/libc++_shared.so' // for watermelondb JSI fastness
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation project(':watermelondb-jsi') // for watermelondb JSI fastness
    
    implementation project(':notifee_react-native') // notifee notification support

    // Explicitly include AndroidX dependencies to avoid conflicts
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    
    // Fix for react-native-push-notification duplicate class conflicts
    configurations.all {
        exclude group: 'com.android.support'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        resolutionStrategy {
            force 'androidx.core:core:1.9.0'
            force 'androidx.appcompat:appcompat:1.6.1'
        }
    }
}


task copyWebviewAssets(type: Copy) {
    from "${rootDir}/../assets/webview"
    into "${projectDir}/src/main/assets/webview"
    include '**/*.js'
}
preBuild.dependsOn(copyWebviewAssets)