/* tslint:disable */
/* eslint-disable */
/**
 * Synkronus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AppBundleChangeLog
 */
export interface AppBundleChangeLog {
    /**
     * 
     * @type {string}
     * @memberof AppBundleChangeLog
     */
    'compare_version_a': string;
    /**
     * 
     * @type {string}
     * @memberof AppBundleChangeLog
     */
    'compare_version_b': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppBundleChangeLog
     */
    'form_changes': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppBundleChangeLog
     */
    'ui_changes': boolean;
    /**
     * 
     * @type {Array<FormDiff>}
     * @memberof AppBundleChangeLog
     */
    'new_forms'?: Array<FormDiff>;
    /**
     * 
     * @type {Array<FormDiff>}
     * @memberof AppBundleChangeLog
     */
    'removed_forms'?: Array<FormDiff>;
    /**
     * 
     * @type {Array<FormModification>}
     * @memberof AppBundleChangeLog
     */
    'modified_forms'?: Array<FormModification>;
}
/**
 * 
 * @export
 * @interface AppBundleFile
 */
export interface AppBundleFile {
    /**
     * 
     * @type {string}
     * @memberof AppBundleFile
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof AppBundleFile
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof AppBundleFile
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof AppBundleFile
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof AppBundleFile
     */
    'modTime': string;
}
/**
 * 
 * @export
 * @interface AppBundleManifest
 */
export interface AppBundleManifest {
    /**
     * 
     * @type {Array<AppBundleFile>}
     * @memberof AppBundleManifest
     */
    'files': Array<AppBundleFile>;
    /**
     * 
     * @type {string}
     * @memberof AppBundleManifest
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof AppBundleManifest
     */
    'generatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof AppBundleManifest
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface AppBundlePushResponse
 */
export interface AppBundlePushResponse {
    /**
     * 
     * @type {string}
     * @memberof AppBundlePushResponse
     */
    'message': string;
    /**
     * 
     * @type {AppBundleManifest}
     * @memberof AppBundlePushResponse
     */
    'manifest': AppBundleManifest;
}
/**
 * 
 * @export
 * @interface AppBundleSwitchVersionPost200Response
 */
export interface AppBundleSwitchVersionPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AppBundleSwitchVersionPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AppBundleVersions
 */
export interface AppBundleVersions {
    /**
     * 
     * @type {Array<string>}
     * @memberof AppBundleVersions
     */
    'versions': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthLoginPostRequest
 */
export interface AuthLoginPostRequest {
    /**
     * User\'s username
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'username': string;
    /**
     * User\'s password
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthRefreshPostRequest
 */
export interface AuthRefreshPostRequest {
    /**
     * Refresh token obtained from login or previous refresh
     * @type {string}
     * @memberof AuthRefreshPostRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken': string;
    /**
     * 
     * @type {number}
     * @memberof AuthResponse
     */
    'expiresAt': number;
}
/**
 * 
 * @export
 * @interface BuildInfo
 */
export interface BuildInfo {
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'commit'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'build_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'go_version'?: string;
}
/**
 * 
 * @export
 * @interface ChangeLog
 */
export interface ChangeLog {
    /**
     * 
     * @type {string}
     * @memberof ChangeLog
     */
    'compare_version_a'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeLog
     */
    'compare_version_b'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeLog
     */
    'form_changes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeLog
     */
    'ui_changes'?: boolean;
    /**
     * 
     * @type {Array<FormDiff>}
     * @memberof ChangeLog
     */
    'new_forms'?: Array<FormDiff>;
    /**
     * 
     * @type {Array<FormDiff>}
     * @memberof ChangeLog
     */
    'removed_forms'?: Array<FormDiff>;
    /**
     * 
     * @type {Array<FormModification>}
     * @memberof ChangeLog
     */
    'modified_forms'?: Array<FormModification>;
}
/**
 * 
 * @export
 * @interface DatabaseInfo
 */
export interface DatabaseInfo {
    /**
     * 
     * @type {string}
     * @memberof DatabaseInfo
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInfo
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseInfo
     */
    'database_name'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface FieldChange
 */
export interface FieldChange {
    /**
     * 
     * @type {string}
     * @memberof FieldChange
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldChange
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface FormDiff
 */
export interface FormDiff {
    /**
     * 
     * @type {string}
     * @memberof FormDiff
     */
    'form'?: string;
}
/**
 * 
 * @export
 * @interface FormModification
 */
export interface FormModification {
    /**
     * 
     * @type {string}
     * @memberof FormModification
     */
    'form'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FormModification
     */
    'schema_changed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormModification
     */
    'ui_changed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormModification
     */
    'core_changed'?: boolean;
    /**
     * 
     * @type {Array<FieldChange>}
     * @memberof FormModification
     */
    'added_fields'?: Array<FieldChange>;
    /**
     * 
     * @type {Array<FieldChange>}
     * @memberof FormModification
     */
    'removed_fields'?: Array<FieldChange>;
}
/**
 * 
 * @export
 * @interface HealthGet200Response
 */
export interface HealthGet200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthGet200Response
     */
    'status'?: HealthGet200ResponseStatusEnum;
    /**
     * Current server time
     * @type {string}
     * @memberof HealthGet200Response
     */
    'timestamp'?: string;
    /**
     * Current API version
     * @type {string}
     * @memberof HealthGet200Response
     */
    'version'?: string;
}

export const HealthGet200ResponseStatusEnum = {
    Ok: 'ok'
} as const;

export type HealthGet200ResponseStatusEnum = typeof HealthGet200ResponseStatusEnum[keyof typeof HealthGet200ResponseStatusEnum];

/**
 * 
 * @export
 * @interface HealthGet503Response
 */
export interface HealthGet503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthGet503Response
     */
    'status'?: HealthGet503ResponseStatusEnum;
    /**
     * Description of the error
     * @type {string}
     * @memberof HealthGet503Response
     */
    'error'?: string;
    /**
     * Current server time
     * @type {string}
     * @memberof HealthGet503Response
     */
    'timestamp'?: string;
}

export const HealthGet503ResponseStatusEnum = {
    Error: 'error'
} as const;

export type HealthGet503ResponseStatusEnum = typeof HealthGet503ResponseStatusEnum[keyof typeof HealthGet503ResponseStatusEnum];

/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetail
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'instance'?: string;
    /**
     * 
     * @type {Array<ProblemDetailErrorsInner>}
     * @memberof ProblemDetail
     */
    'errors'?: Array<ProblemDetailErrorsInner>;
}
/**
 * 
 * @export
 * @interface ProblemDetailErrorsInner
 */
export interface ProblemDetailErrorsInner {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetailErrorsInner
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetailErrorsInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'schemaType': string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'schemaVersion': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Record
     */
    'data': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'hash'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Record
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'change_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'last_modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'last_modified_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'origin_client_id'?: string;
}
/**
 * 
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface SyncPullRequest
 */
export interface SyncPullRequest {
    /**
     * 
     * @type {string}
     * @memberof SyncPullRequest
     */
    'client_id': string;
    /**
     * 
     * @type {number}
     * @memberof SyncPullRequest
     */
    'after_change_id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncPullRequest
     */
    'schema_types'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SyncPullResponse
 */
export interface SyncPullResponse {
    /**
     * 
     * @type {string}
     * @memberof SyncPullResponse
     */
    'server_time': string;
    /**
     * 
     * @type {Array<Record>}
     * @memberof SyncPullResponse
     */
    'records': Array<Record>;
    /**
     * 
     * @type {number}
     * @memberof SyncPullResponse
     */
    'change_cutoff': number;
    /**
     * 
     * @type {string}
     * @memberof SyncPullResponse
     */
    'next_page_token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SyncPullResponse
     */
    'has_more'?: boolean;
}
/**
 * 
 * @export
 * @interface SyncPushRequest
 */
export interface SyncPushRequest {
    /**
     * 
     * @type {string}
     * @memberof SyncPushRequest
     */
    'transmission_id': string;
    /**
     * 
     * @type {string}
     * @memberof SyncPushRequest
     */
    'client_id': string;
    /**
     * 
     * @type {Array<Record>}
     * @memberof SyncPushRequest
     */
    'records': Array<Record>;
}
/**
 * 
 * @export
 * @interface SyncPushResponse
 */
export interface SyncPushResponse {
    /**
     * 
     * @type {string}
     * @memberof SyncPushResponse
     */
    'server_time': string;
    /**
     * 
     * @type {number}
     * @memberof SyncPushResponse
     */
    'success_count': number;
    /**
     * 
     * @type {Array<object>}
     * @memberof SyncPushResponse
     */
    'failed_records'?: Array<object>;
    /**
     * 
     * @type {Array<SyncPushResponseWarningsInner>}
     * @memberof SyncPushResponse
     */
    'warnings'?: Array<SyncPushResponseWarningsInner>;
}
/**
 * 
 * @export
 * @interface SyncPushResponseWarningsInner
 */
export interface SyncPushResponseWarningsInner {
    /**
     * 
     * @type {string}
     * @memberof SyncPushResponseWarningsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SyncPushResponseWarningsInner
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SyncPushResponseWarningsInner
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'os'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'architecture'?: string;
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'cpus'?: number;
}
/**
 * 
 * @export
 * @interface SystemVersionInfo
 */
export interface SystemVersionInfo {
    /**
     * 
     * @type {ServerInfo}
     * @memberof SystemVersionInfo
     */
    'server'?: ServerInfo;
    /**
     * 
     * @type {DatabaseInfo}
     * @memberof SystemVersionInfo
     */
    'database'?: DatabaseInfo;
    /**
     * 
     * @type {SystemInfo}
     * @memberof SystemVersionInfo
     */
    'system'?: SystemInfo;
    /**
     * 
     * @type {BuildInfo}
     * @memberof SystemVersionInfo
     */
    'build'?: BuildInfo;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'role': UserResponseRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt': string;
}

export const UserResponseRoleEnum = {
    ReadOnly: 'read-only',
    ReadWrite: 'read-write',
    Admin: 'admin'
} as const;

export type UserResponseRoleEnum = typeof UserResponseRoleEnum[keyof typeof UserResponseRoleEnum];

/**
 * 
 * @export
 * @interface UsersChangePasswordPost200Response
 */
export interface UsersChangePasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersChangePasswordPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UsersChangePasswordPostRequest
 */
export interface UsersChangePasswordPostRequest {
    /**
     * Current password for verification
     * @type {string}
     * @memberof UsersChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * New password to set
     * @type {string}
     * @memberof UsersChangePasswordPostRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface UsersCreatePostRequest
 */
export interface UsersCreatePostRequest {
    /**
     * New user\'s username
     * @type {string}
     * @memberof UsersCreatePostRequest
     */
    'username': string;
    /**
     * New user\'s password
     * @type {string}
     * @memberof UsersCreatePostRequest
     */
    'password': string;
    /**
     * User\'s role
     * @type {string}
     * @memberof UsersCreatePostRequest
     */
    'role': UsersCreatePostRequestRoleEnum;
}

export const UsersCreatePostRequestRoleEnum = {
    ReadOnly: 'read-only',
    ReadWrite: 'read-write',
    Admin: 'admin'
} as const;

export type UsersCreatePostRequestRoleEnum = typeof UsersCreatePostRequestRoleEnum[keyof typeof UsersCreatePostRequestRoleEnum];

/**
 * 
 * @export
 * @interface UsersResetPasswordPost200Response
 */
export interface UsersResetPasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersResetPasswordPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UsersResetPasswordPostRequest
 */
export interface UsersResetPasswordPostRequest {
    /**
     * Username of the user whose password is being reset
     * @type {string}
     * @memberof UsersResetPasswordPostRequest
     */
    'username': string;
    /**
     * New password for the user
     * @type {string}
     * @memberof UsersResetPasswordPostRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface UsersUsernameDelete200Response
 */
export interface UsersUsernameDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersUsernameDelete200Response
     */
    'message'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Compares two versions of the app bundle and returns detailed changes
         * @summary Get changes between two app bundle versions
         * @param {string} [current] The current version (defaults to latest)
         * @param {string} [target] The target version to compare against (defaults to previous version)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleChangesGet: async (current?: string, target?: string, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-bundle/changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download a specific file from the app bundle
         * @param {string} path 
         * @param {boolean} [preview] If true, returns the file from the latest version including unreleased changes
         * @param {string} [ifNoneMatch] 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleDownloadPathGet: async (path: string, preview?: boolean, ifNoneMatch?: string, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('appBundleDownloadPathGet', 'path', path)
            const localVarPath = `/app-bundle/download/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (preview !== undefined) {
                localVarQueryParameter['preview'] = preview;
            }


    
            if (ifNoneMatch != null) {
                localVarHeaderParameter['if-none-match'] = String(ifNoneMatch);
            }
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the current custom app bundle manifest
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleManifestGet: async (xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-bundle/manifest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a new app bundle (admin only)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {File} [bundle] ZIP file containing the new app bundle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundlePushPost: async (xApiVersion?: string, bundle?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-bundle/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (bundle !== undefined) { 
                localVarFormParams.append('bundle', bundle as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Switch to a specific app bundle version (admin only)
         * @param {string} version Version identifier to switch to
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleSwitchVersionPost: async (version: string, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('appBundleSwitchVersionPost', 'version', version)
            const localVarPath = `/app-bundle/switch/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of available app bundle versions
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleVersionsGet: async (xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-bundle/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a JWT token by providing username and password
         * @summary Authenticate with the API
         * @param {AuthLoginPostRequest} authLoginPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (authLoginPostRequest: AuthLoginPostRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLoginPostRequest' is not null or undefined
            assertParamExists('authLoginPost', 'authLoginPostRequest', authLoginPostRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a new JWT token using a refresh token
         * @summary Refresh authentication token
         * @param {AuthRefreshPostRequest} authRefreshPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost: async (authRefreshPostRequest: AuthRefreshPostRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRefreshPostRequest' is not null or undefined
            assertParamExists('authRefreshPost', 'authRefreshPostRequest', authRefreshPostRequest)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRefreshPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pull updated records since last sync
         * @param {SyncPullRequest} syncPullRequest 
         * @param {string} [schemaType] Filter by schemaType
         * @param {number} [limit] Maximum number of records to return
         * @param {string} [pageToken] Pagination token from previous response
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPullPost: async (syncPullRequest: SyncPullRequest, schemaType?: string, limit?: number, pageToken?: string, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncPullRequest' is not null or undefined
            assertParamExists('syncPullPost', 'syncPullRequest', syncPullRequest)
            const localVarPath = `/sync/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (schemaType !== undefined) {
                localVarQueryParameter['schemaType'] = schemaType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncPullRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Push new or updated records to the server
         * @param {SyncPushRequest} syncPushRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPushPost: async (syncPushRequest: SyncPushRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncPushRequest' is not null or undefined
            assertParamExists('syncPushPost', 'syncPushRequest', syncPushRequest)
            const localVarPath = `/sync/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncPushRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change password for the currently authenticated user
         * @summary Change current user\'s password
         * @param {UsersChangePasswordPostRequest} usersChangePasswordPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersChangePasswordPost: async (usersChangePasswordPostRequest: UsersChangePasswordPostRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersChangePasswordPostRequest' is not null or undefined
            assertParamExists('usersChangePasswordPost', 'usersChangePasswordPostRequest', usersChangePasswordPostRequest)
            const localVarPath = `/users/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user with specified username, password, and role
         * @summary Create a new user (admin only)
         * @param {UsersCreatePostRequest} usersCreatePostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreatePost: async (usersCreatePostRequest: UsersCreatePostRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersCreatePostRequest' is not null or undefined
            assertParamExists('usersCreatePost', 'usersCreatePostRequest', usersCreatePostRequest)
            const localVarPath = `/users/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all users in the system. Admin access required.
         * @summary List all users (admin only)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password for a specified user
         * @summary Reset a user\'s password (admin only)
         * @param {UsersResetPasswordPostRequest} usersResetPasswordPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersResetPasswordPost: async (usersResetPasswordPostRequest: UsersResetPasswordPostRequest, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersResetPasswordPostRequest' is not null or undefined
            assertParamExists('usersResetPasswordPost', 'usersResetPasswordPostRequest', usersResetPasswordPostRequest)
            const localVarPath = `/users/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user by username
         * @summary Delete a user (admin only)
         * @param {string} username Username of the user to delete
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUsernameDelete: async (username: string, xApiVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersUsernameDelete', 'username', username)
            const localVarPath = `/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (xApiVersion != null) {
                localVarHeaderParameter['x-api-version'] = String(xApiVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed version information about the server, including build information and system details
         * @summary Get server version and system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Compares two versions of the app bundle and returns detailed changes
         * @summary Get changes between two app bundle versions
         * @param {string} [current] The current version (defaults to latest)
         * @param {string} [target] The target version to compare against (defaults to previous version)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundleChangesGet(current?: string, target?: string, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundleChangesGet(current, target, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundleChangesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download a specific file from the app bundle
         * @param {string} path 
         * @param {boolean} [preview] If true, returns the file from the latest version including unreleased changes
         * @param {string} [ifNoneMatch] 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundleDownloadPathGet(path: string, preview?: boolean, ifNoneMatch?: string, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundleDownloadPathGet(path, preview, ifNoneMatch, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundleDownloadPathGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the current custom app bundle manifest
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundleManifestGet(xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppBundleManifest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundleManifestGet(xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundleManifestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a new app bundle (admin only)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {File} [bundle] ZIP file containing the new app bundle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundlePushPost(xApiVersion?: string, bundle?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppBundlePushResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundlePushPost(xApiVersion, bundle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundlePushPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Switch to a specific app bundle version (admin only)
         * @param {string} version Version identifier to switch to
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundleSwitchVersionPost(version: string, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppBundleSwitchVersionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundleSwitchVersionPost(version, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundleSwitchVersionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of available app bundle versions
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appBundleVersionsGet(xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppBundleVersions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appBundleVersionsGet(xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appBundleVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Obtain a JWT token by providing username and password
         * @summary Authenticate with the API
         * @param {AuthLoginPostRequest} authLoginPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(authLoginPostRequest: AuthLoginPostRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(authLoginPostRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Obtain a new JWT token using a refresh token
         * @summary Refresh authentication token
         * @param {AuthRefreshPostRequest} authRefreshPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshPost(authRefreshPostRequest: AuthRefreshPostRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshPost(authRefreshPostRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pull updated records since last sync
         * @param {SyncPullRequest} syncPullRequest 
         * @param {string} [schemaType] Filter by schemaType
         * @param {number} [limit] Maximum number of records to return
         * @param {string} [pageToken] Pagination token from previous response
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPullPost(syncPullRequest: SyncPullRequest, schemaType?: string, limit?: number, pageToken?: string, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncPullResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPullPost(syncPullRequest, schemaType, limit, pageToken, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.syncPullPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Push new or updated records to the server
         * @param {SyncPushRequest} syncPushRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPushPost(syncPushRequest: SyncPushRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncPushResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPushPost(syncPushRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.syncPushPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change password for the currently authenticated user
         * @summary Change current user\'s password
         * @param {UsersChangePasswordPostRequest} usersChangePasswordPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersChangePasswordPost(usersChangePasswordPostRequest: UsersChangePasswordPostRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersChangePasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersChangePasswordPost(usersChangePasswordPostRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new user with specified username, password, and role
         * @summary Create a new user (admin only)
         * @param {UsersCreatePostRequest} usersCreatePostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCreatePost(usersCreatePostRequest: UsersCreatePostRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCreatePost(usersCreatePostRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all users in the system. Admin access required.
         * @summary List all users (admin only)
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset password for a specified user
         * @summary Reset a user\'s password (admin only)
         * @param {UsersResetPasswordPostRequest} usersResetPasswordPostRequest 
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersResetPasswordPost(usersResetPasswordPostRequest: UsersResetPasswordPostRequest, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResetPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersResetPasswordPost(usersResetPasswordPostRequest, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a user by username
         * @summary Delete a user (admin only)
         * @param {string} username Username of the user to delete
         * @param {string} [xApiVersion] Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUsernameDelete(username: string, xApiVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUsernameDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUsernameDelete(username, xApiVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersUsernameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns detailed version information about the server, including build information and system details
         * @summary Get server version and system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemVersionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.versionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Compares two versions of the app bundle and returns detailed changes
         * @summary Get changes between two app bundle versions
         * @param {DefaultApiAppBundleChangesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleChangesGet(requestParameters: DefaultApiAppBundleChangesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ChangeLog> {
            return localVarFp.appBundleChangesGet(requestParameters.current, requestParameters.target, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download a specific file from the app bundle
         * @param {DefaultApiAppBundleDownloadPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleDownloadPathGet(requestParameters: DefaultApiAppBundleDownloadPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.appBundleDownloadPathGet(requestParameters.path, requestParameters.preview, requestParameters.ifNoneMatch, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the current custom app bundle manifest
         * @param {DefaultApiAppBundleManifestGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleManifestGet(requestParameters: DefaultApiAppBundleManifestGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AppBundleManifest> {
            return localVarFp.appBundleManifestGet(requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a new app bundle (admin only)
         * @param {DefaultApiAppBundlePushPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundlePushPost(requestParameters: DefaultApiAppBundlePushPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AppBundlePushResponse> {
            return localVarFp.appBundlePushPost(requestParameters.xApiVersion, requestParameters.bundle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Switch to a specific app bundle version (admin only)
         * @param {DefaultApiAppBundleSwitchVersionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleSwitchVersionPost(requestParameters: DefaultApiAppBundleSwitchVersionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppBundleSwitchVersionPost200Response> {
            return localVarFp.appBundleSwitchVersionPost(requestParameters.version, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of available app bundle versions
         * @param {DefaultApiAppBundleVersionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appBundleVersionsGet(requestParameters: DefaultApiAppBundleVersionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AppBundleVersions> {
            return localVarFp.appBundleVersionsGet(requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a JWT token by providing username and password
         * @summary Authenticate with the API
         * @param {DefaultApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(requestParameters: DefaultApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.authLoginPost(requestParameters.authLoginPostRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a new JWT token using a refresh token
         * @summary Refresh authentication token
         * @param {DefaultApiAuthRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost(requestParameters: DefaultApiAuthRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.authRefreshPost(requestParameters.authRefreshPostRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pull updated records since last sync
         * @param {DefaultApiSyncPullPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPullPost(requestParameters: DefaultApiSyncPullPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncPullResponse> {
            return localVarFp.syncPullPost(requestParameters.syncPullRequest, requestParameters.schemaType, requestParameters.limit, requestParameters.pageToken, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Push new or updated records to the server
         * @param {DefaultApiSyncPushPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPushPost(requestParameters: DefaultApiSyncPushPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncPushResponse> {
            return localVarFp.syncPushPost(requestParameters.syncPushRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Change password for the currently authenticated user
         * @summary Change current user\'s password
         * @param {DefaultApiUsersChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersChangePasswordPost(requestParameters: DefaultApiUsersChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersChangePasswordPost200Response> {
            return localVarFp.usersChangePasswordPost(requestParameters.usersChangePasswordPostRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user with specified username, password, and role
         * @summary Create a new user (admin only)
         * @param {DefaultApiUsersCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreatePost(requestParameters: DefaultApiUsersCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.usersCreatePost(requestParameters.usersCreatePostRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all users in the system. Admin access required.
         * @summary List all users (admin only)
         * @param {DefaultApiUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(requestParameters: DefaultApiUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.usersGet(requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password for a specified user
         * @summary Reset a user\'s password (admin only)
         * @param {DefaultApiUsersResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersResetPasswordPost(requestParameters: DefaultApiUsersResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResetPasswordPost200Response> {
            return localVarFp.usersResetPasswordPost(requestParameters.usersResetPasswordPostRequest, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user by username
         * @summary Delete a user (admin only)
         * @param {DefaultApiUsersUsernameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUsernameDelete(requestParameters: DefaultApiUsersUsernameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersUsernameDelete200Response> {
            return localVarFp.usersUsernameDelete(requestParameters.username, requestParameters.xApiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed version information about the server, including build information and system details
         * @summary Get server version and system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemVersionInfo> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appBundleChangesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundleChangesGetRequest
 */
export interface DefaultApiAppBundleChangesGetRequest {
    /**
     * The current version (defaults to latest)
     * @type {string}
     * @memberof DefaultApiAppBundleChangesGet
     */
    readonly current?: string

    /**
     * The target version to compare against (defaults to previous version)
     * @type {string}
     * @memberof DefaultApiAppBundleChangesGet
     */
    readonly target?: string

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundleChangesGet
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for appBundleDownloadPathGet operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundleDownloadPathGetRequest
 */
export interface DefaultApiAppBundleDownloadPathGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppBundleDownloadPathGet
     */
    readonly path: string

    /**
     * If true, returns the file from the latest version including unreleased changes
     * @type {boolean}
     * @memberof DefaultApiAppBundleDownloadPathGet
     */
    readonly preview?: boolean

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppBundleDownloadPathGet
     */
    readonly ifNoneMatch?: string

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundleDownloadPathGet
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for appBundleManifestGet operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundleManifestGetRequest
 */
export interface DefaultApiAppBundleManifestGetRequest {
    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundleManifestGet
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for appBundlePushPost operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundlePushPostRequest
 */
export interface DefaultApiAppBundlePushPostRequest {
    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundlePushPost
     */
    readonly xApiVersion?: string

    /**
     * ZIP file containing the new app bundle
     * @type {File}
     * @memberof DefaultApiAppBundlePushPost
     */
    readonly bundle?: File
}

/**
 * Request parameters for appBundleSwitchVersionPost operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundleSwitchVersionPostRequest
 */
export interface DefaultApiAppBundleSwitchVersionPostRequest {
    /**
     * Version identifier to switch to
     * @type {string}
     * @memberof DefaultApiAppBundleSwitchVersionPost
     */
    readonly version: string

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundleSwitchVersionPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for appBundleVersionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiAppBundleVersionsGetRequest
 */
export interface DefaultApiAppBundleVersionsGetRequest {
    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAppBundleVersionsGet
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for authLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiAuthLoginPostRequest
 */
export interface DefaultApiAuthLoginPostRequest {
    /**
     * 
     * @type {AuthLoginPostRequest}
     * @memberof DefaultApiAuthLoginPost
     */
    readonly authLoginPostRequest: AuthLoginPostRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAuthLoginPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for authRefreshPost operation in DefaultApi.
 * @export
 * @interface DefaultApiAuthRefreshPostRequest
 */
export interface DefaultApiAuthRefreshPostRequest {
    /**
     * 
     * @type {AuthRefreshPostRequest}
     * @memberof DefaultApiAuthRefreshPost
     */
    readonly authRefreshPostRequest: AuthRefreshPostRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiAuthRefreshPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for syncPullPost operation in DefaultApi.
 * @export
 * @interface DefaultApiSyncPullPostRequest
 */
export interface DefaultApiSyncPullPostRequest {
    /**
     * 
     * @type {SyncPullRequest}
     * @memberof DefaultApiSyncPullPost
     */
    readonly syncPullRequest: SyncPullRequest

    /**
     * Filter by schemaType
     * @type {string}
     * @memberof DefaultApiSyncPullPost
     */
    readonly schemaType?: string

    /**
     * Maximum number of records to return
     * @type {number}
     * @memberof DefaultApiSyncPullPost
     */
    readonly limit?: number

    /**
     * Pagination token from previous response
     * @type {string}
     * @memberof DefaultApiSyncPullPost
     */
    readonly pageToken?: string

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiSyncPullPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for syncPushPost operation in DefaultApi.
 * @export
 * @interface DefaultApiSyncPushPostRequest
 */
export interface DefaultApiSyncPushPostRequest {
    /**
     * 
     * @type {SyncPushRequest}
     * @memberof DefaultApiSyncPushPost
     */
    readonly syncPushRequest: SyncPushRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiSyncPushPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for usersChangePasswordPost operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersChangePasswordPostRequest
 */
export interface DefaultApiUsersChangePasswordPostRequest {
    /**
     * 
     * @type {UsersChangePasswordPostRequest}
     * @memberof DefaultApiUsersChangePasswordPost
     */
    readonly usersChangePasswordPostRequest: UsersChangePasswordPostRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiUsersChangePasswordPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for usersCreatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersCreatePostRequest
 */
export interface DefaultApiUsersCreatePostRequest {
    /**
     * 
     * @type {UsersCreatePostRequest}
     * @memberof DefaultApiUsersCreatePost
     */
    readonly usersCreatePostRequest: UsersCreatePostRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiUsersCreatePost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for usersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersGetRequest
 */
export interface DefaultApiUsersGetRequest {
    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiUsersGet
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for usersResetPasswordPost operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersResetPasswordPostRequest
 */
export interface DefaultApiUsersResetPasswordPostRequest {
    /**
     * 
     * @type {UsersResetPasswordPostRequest}
     * @memberof DefaultApiUsersResetPasswordPost
     */
    readonly usersResetPasswordPostRequest: UsersResetPasswordPostRequest

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiUsersResetPasswordPost
     */
    readonly xApiVersion?: string
}

/**
 * Request parameters for usersUsernameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiUsersUsernameDeleteRequest
 */
export interface DefaultApiUsersUsernameDeleteRequest {
    /**
     * Username of the user to delete
     * @type {string}
     * @memberof DefaultApiUsersUsernameDelete
     */
    readonly username: string

    /**
     * Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
     * @type {string}
     * @memberof DefaultApiUsersUsernameDelete
     */
    readonly xApiVersion?: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Compares two versions of the app bundle and returns detailed changes
     * @summary Get changes between two app bundle versions
     * @param {DefaultApiAppBundleChangesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundleChangesGet(requestParameters: DefaultApiAppBundleChangesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundleChangesGet(requestParameters.current, requestParameters.target, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download a specific file from the app bundle
     * @param {DefaultApiAppBundleDownloadPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundleDownloadPathGet(requestParameters: DefaultApiAppBundleDownloadPathGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundleDownloadPathGet(requestParameters.path, requestParameters.preview, requestParameters.ifNoneMatch, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the current custom app bundle manifest
     * @param {DefaultApiAppBundleManifestGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundleManifestGet(requestParameters: DefaultApiAppBundleManifestGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundleManifestGet(requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a new app bundle (admin only)
     * @param {DefaultApiAppBundlePushPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundlePushPost(requestParameters: DefaultApiAppBundlePushPostRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundlePushPost(requestParameters.xApiVersion, requestParameters.bundle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Switch to a specific app bundle version (admin only)
     * @param {DefaultApiAppBundleSwitchVersionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundleSwitchVersionPost(requestParameters: DefaultApiAppBundleSwitchVersionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundleSwitchVersionPost(requestParameters.version, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of available app bundle versions
     * @param {DefaultApiAppBundleVersionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appBundleVersionsGet(requestParameters: DefaultApiAppBundleVersionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appBundleVersionsGet(requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain a JWT token by providing username and password
     * @summary Authenticate with the API
     * @param {DefaultApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLoginPost(requestParameters: DefaultApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLoginPost(requestParameters.authLoginPostRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain a new JWT token using a refresh token
     * @summary Refresh authentication token
     * @param {DefaultApiAuthRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authRefreshPost(requestParameters: DefaultApiAuthRefreshPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authRefreshPost(requestParameters.authRefreshPostRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pull updated records since last sync
     * @param {DefaultApiSyncPullPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public syncPullPost(requestParameters: DefaultApiSyncPullPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).syncPullPost(requestParameters.syncPullRequest, requestParameters.schemaType, requestParameters.limit, requestParameters.pageToken, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Push new or updated records to the server
     * @param {DefaultApiSyncPushPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public syncPushPost(requestParameters: DefaultApiSyncPushPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).syncPushPost(requestParameters.syncPushRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change password for the currently authenticated user
     * @summary Change current user\'s password
     * @param {DefaultApiUsersChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersChangePasswordPost(requestParameters: DefaultApiUsersChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersChangePasswordPost(requestParameters.usersChangePasswordPostRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user with specified username, password, and role
     * @summary Create a new user (admin only)
     * @param {DefaultApiUsersCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersCreatePost(requestParameters: DefaultApiUsersCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersCreatePost(requestParameters.usersCreatePostRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all users in the system. Admin access required.
     * @summary List all users (admin only)
     * @param {DefaultApiUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersGet(requestParameters: DefaultApiUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersGet(requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password for a specified user
     * @summary Reset a user\'s password (admin only)
     * @param {DefaultApiUsersResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersResetPasswordPost(requestParameters: DefaultApiUsersResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersResetPasswordPost(requestParameters.usersResetPasswordPostRequest, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user by username
     * @summary Delete a user (admin only)
     * @param {DefaultApiUsersUsernameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUsernameDelete(requestParameters: DefaultApiUsersUsernameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersUsernameDelete(requestParameters.username, requestParameters.xApiVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns detailed version information about the server, including build information and system details
     * @summary Get server version and system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public versionGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the current health status of the service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the current health status of the service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Returns the current health status of the service
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthGet200Response> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Returns the current health status of the service
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



