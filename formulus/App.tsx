import React, { useEffect, useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import WelcomeScreen from './src/screens/WelcomeScreen';
import SettingsScreen from './src/screens/SettingsScreen';
import SyncScreen from './src/screens/SyncScreen';
import HomeScreen from './src/screens/HomeScreen';
import FormManagementScreen from './src/screens/FormManagementScreen';
import QRScannerModal from './src/components/QRScannerModal';
import SignatureCaptureModal from './src/components/SignatureCaptureModal';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { TouchableOpacity, View } from 'react-native';
import 'react-native-url-polyfill/auto' // To support axios autogenerated API client
import { FormService } from './src/services/FormService';
import { SyncProvider } from './src/contexts/SyncContext';
import { appEvents } from './src/webview/FormulusMessageHandlers';

const Stack = createStackNavigator();

const NavigationButtons = ({ navigation }: { navigation: any }) => (
  <View style={{ flexDirection: 'row' }}>
    <TouchableOpacity
      onPress={() => navigation.navigate('FormManagement')}
      style={{ marginRight: 16 }}
      accessibilityLabel="Form Management"
    >
      <Icon name="clipboard-list" size={28} color="#333" />
    </TouchableOpacity>
    <TouchableOpacity
      onPress={() => navigation.navigate('Home')}
      style={{ marginRight: 8 }}
      accessibilityLabel="Go to Home"
    >
      <Icon name="home" size={28} color="#333" />
    </TouchableOpacity>
    <TouchableOpacity
      onPress={() => navigation.navigate('Settings')}
      style={{ marginRight: 8 }}
      accessibilityLabel="Go to Settings"
    >
      <Icon name="cog" size={28} color="#333" />
    </TouchableOpacity>
    <TouchableOpacity
      onPress={() => navigation.navigate('Sync')}
      style={{ marginRight: 8 }}
      accessibilityLabel="Sync Data"
    >
      <Icon name="sync" size={28} color="#333" />
    </TouchableOpacity>
  </View>
);

function App(): React.JSX.Element {
  const [qrScannerVisible, setQrScannerVisible] = useState(false);
  const [qrScannerData, setQrScannerData] = useState<{
    fieldId: string;
    onResult: (result: any) => void;
  } | null>(null);

  const [signatureCaptureVisible, setSignatureCaptureVisible] = useState(false);
  const [signatureCaptureData, setSignatureCaptureData] = useState<{
    fieldId: string;
    onResult: (result: any) => void;
  } | null>(null);

  useEffect(() => {
    // pre-load form service
    FormService.getInstance().then(() => {
      console.log('FormService pre-loaded');
    });
    
    // Listen for QR scanner requests
    const handleOpenQRScanner = (data: { fieldId: string; onResult: (result: any) => void }) => {
      console.log('Opening QR scanner for field:', data.fieldId);
      setQrScannerData(data);
      setQrScannerVisible(true);
    };

    // Listen for signature capture requests
    const handleOpenSignatureCapture = (data: { fieldId: string; onResult: (result: any) => void }) => {
      console.log('Opening signature capture for field:', data.fieldId);
      setSignatureCaptureData(data);
      setSignatureCaptureVisible(true);
    };

    appEvents.addListener('openQRScanner', handleOpenQRScanner);
    appEvents.addListener('openSignatureCapture', handleOpenSignatureCapture);

    return () => {
      appEvents.removeListener('openQRScanner', handleOpenQRScanner);
      appEvents.removeListener('openSignatureCapture', handleOpenSignatureCapture);
    };
  }, []);

  const handleQRScannerClose = () => {
    setQrScannerVisible(false);
    setQrScannerData(null);
  };

  const handleSignatureCaptureClose = () => {
    setSignatureCaptureVisible(false);
    setSignatureCaptureData(null);
  };

  const handleSignatureCaptureResult = (result: any) => {
    if (signatureCaptureData?.onResult) {
      signatureCaptureData.onResult(result);
    }
  };
  return (
    <SyncProvider>
      <NavigationContainer>
        <Stack.Navigator
          initialRouteName="Welcome"
          screenOptions={({ navigation }) => ({
            headerRight: () => <NavigationButtons navigation={navigation} />,
          })}
        >
          <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'Home' }} />
          <Stack.Screen name="Welcome" component={WelcomeScreen} options={{ title: 'Welcome' }} />
          <Stack.Screen name="Settings" component={SettingsScreen} options={{ title: 'Settings' }} />
          <Stack.Screen name="Sync" component={SyncScreen} options={{ title: 'Sync Data' }} />
          <Stack.Screen name="FormManagement" component={FormManagementScreen} options={{ title: 'Form Management' }} />
        </Stack.Navigator>
      </NavigationContainer>
      
      {/* QR Scanner Modal */}
      <QRScannerModal
        visible={qrScannerVisible}
        onClose={handleQRScannerClose}
        fieldId={qrScannerData?.fieldId}
        onResult={qrScannerData?.onResult}
      />
      
      {/* Signature Capture Modal */}
      <SignatureCaptureModal
        visible={signatureCaptureVisible}
        onClose={handleSignatureCaptureClose}
        fieldId={signatureCaptureData?.fieldId || ''}
        onSignatureCapture={handleSignatureCaptureResult}
      />
    </SyncProvider>
  );
}

export default App;