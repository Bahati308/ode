openapi: 3.0.0
info:
  title: Synkronus API
  version: 1.0.2
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status of the service
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    description: Current server time
                  version:
                    type: string
                    description: Current API version
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [error]
                    example: error
                  error:
                    type: string
                    description: Description of the error
                  timestamp:
                    type: string
                    format: date-time
                    description: Current server time

  /version:
    get:
      summary: Get server version and system information
      description: Returns detailed version information about the server, including build information and system details
      responses:
        '200':
          description: Successful response with version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersionInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /app-bundle/changes:
    get:
      summary: Get changes between two app bundle versions
      description: Compares two versions of the app bundle and returns detailed changes
      security:
        - bearerAuth: [read-only, read-write]
      parameters:
        - name: current
          in: query
          required: false
          schema:
            type: string
          description: The current version (defaults to latest)
        - name: target
          in: query
          required: false
          schema:
            type: string
          description: The target version to compare against (defaults to previous version)
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: Successfully retrieved changes between versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
        '400':
          description: Invalid version format or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: One or both versions not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /app-bundle/manifest:
    get:
      summary: Get the current custom app bundle manifest
      security:
        - bearerAuth: [read-only, read-write]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: Bundle file list
          headers:
            etag:
              schema:
                type: string
              description: Hash of the manifest for caching
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppBundleManifest'

  /app-bundle/download/{path}:
    get:
      summary: Download a specific file from the app bundle
      security:
        - bearerAuth: [read-only, read-write]
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
        - name: preview
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: If true, returns the file from the latest version including unreleased changes
        - name: if-none-match
          in: header
          schema:
            type: string
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: File content
          headers:
            etag:
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '304':
          description: Not Modified

  /app-bundle/versions:
    get:
      summary: Get a list of available app bundle versions
      security:
        - bearerAuth: [read-only, read-write]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: List of available app bundle versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppBundleVersions'

  /app-bundle/push:
    post:
      summary: Upload a new app bundle (admin only)
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bundle:
                  type: string
                  format: binary
                  description: ZIP file containing the new app bundle
      responses:
        '200':
          description: App bundle successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppBundlePushResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '413':
          description: File too large
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /app-bundle/switch/{version}:
    post:
      summary: Switch to a specific app bundle version (admin only)
      security:
        - bearerAuth: [admin]
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
          description: Version identifier to switch to
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: Successfully switched to the specified version
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Switched to app bundle version 20250507-123456"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: Version not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /auth/login:
    post:
      summary: Authenticate with the API
      description: Obtain a JWT token by providing username and password
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  description: User's username
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Authentication failed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /auth/refresh:
    post:
      summary: Refresh authentication token
      description: Obtain a new JWT token using a refresh token
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
                  description: Refresh token obtained from login or previous refresh
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Invalid or expired refresh token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/create:
    post:
      summary: Create a new user (admin only)
      description: Create a new user with specified username, password, and role
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, role]
              properties:
                username:
                  type: string
                  description: New user's username
                password:
                  type: string
                  format: password
                  description: New user's password
                role:
                  type: string
                  enum: [read-only, read-write, admin]
                  description: User's role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '409':
          description: Conflict - Username already exists
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users:
    get:
      summary: List all users (admin only)
      description: Retrieve a list of all users in the system. Admin access required.
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/{username}:
    delete:
      summary: Delete a user (admin only)
      description: Delete a user by username
      security:
        - bearerAuth: [admin]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to delete
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/reset-password:
    post:
      summary: Reset a user's password (admin only)
      description: Reset password for a specified user
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, newPassword]
              properties:
                username:
                  type: string
                  description: Username of the user whose password is being reset
                newPassword:
                  type: string
                  format: password
                  description: New password for the user
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/change-password:
    post:
      summary: Change current user's password
      description: Change password for the currently authenticated user
      security:
        - bearerAuth: [read-only, read-write, admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Current password for verification
                newPassword:
                  type: string
                  format: password
                  description: New password to set
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized or incorrect current password
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /sync/pull:
    post:
      summary: Pull updated records since last sync
      security:
        - bearerAuth: [read-only, read-write]
      parameters:
        - name: schemaType
          in: query
          schema:
            type: string
          description: Filter by schemaType
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
          description: Maximum number of records to return
        - name: page_token
          in: query
          schema:
            type: string
          description: Pagination token from previous response
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncPullRequest'
      responses:
        '200':
          description: Sync data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncPullResponse'

  /sync/push:
    post:
      summary: Push new or updated records to the server
      security:
        - bearerAuth: [read-write]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncPushRequest'
      responses:
        '200':
          description: Sync result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncPushResponse'

components:
  schemas:
    SystemVersionInfo:
      type: object
      properties:
        server:
          $ref: '#/components/schemas/ServerInfo'
        database:
          $ref: '#/components/schemas/DatabaseInfo'
        system:
          $ref: '#/components/schemas/SystemInfo'
        build:
          $ref: '#/components/schemas/BuildInfo'
    ServerInfo:
      type: object
      properties:
        version:
          type: string
          example: "1.0.0"
    DatabaseInfo:
      type: object
      properties:
        type:
          type: string
          example: "PostgreSQL"
        version:
          type: string
          example: "15.3"
        database_name:
          type: string
          example: "synkronus_db"
    SystemInfo:
      type: object
      properties:
        os:
          type: string
          example: "linux"
        architecture:
          type: string
          example: "amd64"
        cpus:
          type: integer
          example: 4
    BuildInfo:
      type: object
      properties:
        commit:
          type: string
          example: "a1b2c3d4e5f6"
        build_time:
          type: string
          example: "2023-01-01T12:00:00Z"
        go_version:
          type: string
          example: "go1.20.1"
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Failed to get version information"
    ChangeLog:
      type: object
      properties:
        compare_version_a:
          type: string
        compare_version_b:
          type: string
        form_changes:
          type: boolean
        ui_changes:
          type: boolean
        new_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormDiff'
        removed_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormDiff'
        modified_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormModification'
    FormDiff:
      type: object
      properties:
        form:
          type: string
    FieldChange:
      type: object
      properties:
        field:
          type: string
        type:
          type: string
    FormModification:
      type: object
      properties:
        form:
          type: string
        schema_changed:
          type: boolean
        ui_changed:
          type: boolean
        core_changed:
          type: boolean
        added_fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldChange'
        removed_fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldChange'
    AppBundleManifest:
      type: object
      required: [files, version, generatedAt, hash]
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/AppBundleFile'
        version:
          type: string
        generatedAt:
          type: string
          format: date-time
        hash:
          type: string
    AppBundleFile:
      type: object
      required: [path, size, hash, mimeType, modTime]
      properties:
        path:
          type: string
        size:
          type: integer
        hash:
          type: string
        mimeType:
          type: string
        modTime:
          type: string
          format: date-time
    AppBundleVersions:
      type: object
      required: [versions]
      properties:
        versions:
          type: array
          items:
            type: string
    AppBundleChangeLog:
      type: object
      required: [compare_version_a, compare_version_b, form_changes, ui_changes]
      properties:
        compare_version_a:
          type: string
        compare_version_b:
          type: string
        form_changes:
          type: boolean
        ui_changes:
          type: boolean
        new_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormDiff'
        removed_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormDiff'
        modified_forms:
          type: array
          items:
            $ref: '#/components/schemas/FormModification'
    AppBundlePushResponse:
      type: object
      required: [message, manifest]
      properties:
        message:
          type: string
        manifest:
          $ref: '#/components/schemas/AppBundleManifest'
    AuthResponse:
      type: object
      required: [token, refreshToken, expiresAt]
      properties:
        token:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: integer
          format: int64
    UserResponse:    
      type: object
      required: [username, role, createdAt]
      properties:
        username:
          type: string
        role:
          type: string
          enum: [read-only, read-write, admin]
        createdAt:
          type: string
          format: date-time

    SyncPullRequest:
      type: object
      required: [client_id]
      properties:
        client_id:
          type: string
        since:
          type: object
          description: Optional pagination cursor indicating the last seen change
          properties:
            version:
              type: integer
            id:
              type: string
        schema_types:
          type: array
          items:
            type: string

    SyncPullResponse:
      type: object
      required: [current_version, records, change_cutoff]
      properties:
        current_version:
          type: integer
          description: Current database version number that increments with each update
        records:
          type: array
          items:
            $ref: '#/components/schemas/Observation'
        change_cutoff:
          type: integer
          description: Version number of the last change included in this response
        next_page_token:
          type: string
        has_more:
          type: boolean
        sync_format_version:
          type: string
          example: "1.0"

    SyncPushRequest:
      type: object
      required: [transmission_id, client_id, records]
      properties:
        transmission_id:
          type: string
          format: uuid
        client_id:
          type: string
        records:
          type: array
          items:
            $ref: '#/components/schemas/Observation'

    SyncPushResponse:
      type: object
      required: [current_version, success_count]
      properties:
        current_version:
          type: integer
          description: Current database version number after processing the push
        success_count:
          type: integer
        failed_records:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
            required: [id, code, message]
            properties:
              id:
                type: string
              code:
                type: string
              message:
                type: string

    Observation:
      type: object
      required:
        - observation_id
        - form_type
        - form_version
        - data
        - created_at
        - updated_at
        - deleted
      properties:
        observation_id:
          type: string
        form_type:
          type: string
        form_version:
          type: string
        data:
          type: object
          description: Arbitrary JSON object containing form data
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        synced_at:
          type: string
          format: date-time
          nullable: true
        deleted:
          type: boolean


    ProblemDetail:
      type: object
      required: [type, title, status, detail]
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT token obtained from /auth/login'
