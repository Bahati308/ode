paths:
  /users:
    get:
      summary: List all users (admin only)
      description: Retrieve a list of all users in the system. Admin access required.
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/create:
    post:
      summary: Create a new user (admin only)
      description: Create a new user with specified username, password, and role.
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (e.g., invalid input, user already exists)
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/reset-password:
    post:
      summary: Reset a user's password (admin only)
      description: Allows an administrator to reset the password for a specified user.
      security:
        - bearerAuth: [admin]
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/{username}:
    delete:
      summary: Delete a user (admin only)
      description: Delete a user by username.
      security:
        - bearerAuth: [admin]
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to delete
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '403':
          description: Forbidden - Admin role required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /users/change-password:
    post:
      summary: Change current user's password
      description: Change password for the currently authenticated user.
      security:
        - bearerAuth: [read-only, read-write, admin] # Any authenticated user can change their own password
      parameters:
        - name: x-api-version
          in: header
          required: false
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
            example: '1.0.0'
          description: Optional API version header using semantic versioning (MAJOR.MINOR.PATCH)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        '400':
          description: Bad request (e.g., new password doesn't meet policy)
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '401':
          description: Unauthorized or incorrect current password
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

components:
  schemas:
    UserCreateRequest:
      type: object
      required: [username, password, role]
      properties:
        username:
          type: string
          description: Desired username for the new user.
        password:
          type: string
          format: password
          description: Desired password for the new user.
        role:
          type: string
          enum: [read-only, read-write, admin]
          default: read-only
          description: Role to assign to the new user.

    UserResetPasswordRequest:
      type: object
      required: [username, newPassword]
      properties:
        username:
          type: string
          description: Username of the user whose password is being reset.
        newPassword:
          type: string
          format: password
          description: New password for the user.

    UserChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
          format: password
          description: Current password for verification.
        newPassword:
          type: string
          format: password
          description: New password to set.

    UserResponse:
      type: object
      required: [username, role, createdAt]
      properties:
        username:
          type: string
          description: User's username.
        role:
          type: string
          enum: [read-only, read-write, admin]
          description: User's role.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.

    UserSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful."
